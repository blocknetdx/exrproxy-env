version: "3.8"

services:
{% for daemon in daemons %}
  {{ daemon.name }}:
    image: {{ daemon.image }}
    restart: unless-stopped
    expose:
      - {{ daemon.rpcPort }}
      - {{ daemon.p2pPort }}
    entrypoint: /opt/blockchain/start-{{ daemon.configName }}.sh
    command:
      - {{ daemon.binFile }}
    environment:
      RPC_USER: "${RPC_USER}"
      RPC_PASSWORD: "${RPC_PASSWORD}"
      RPC_ALLOWIP: 172.31.0.0/20
    volumes:
      - {{ daemon.config_mount_dir }}/{{ daemon.name }}/config:/opt/blockchain/config
      - {{ daemon.data_mount_dir }}/{{ daemon.name }}/data:/opt/blockchain/data
    {% if daemon.chainstate_mount_dir is defined  %}
  - {{ daemon.chainstate_mount_dir }}/{{ daemon.name }}/data/chainstate:/opt/blockchain/data/chainstate
    {% endif %}
  - type: bind
        source: ./scripts/entrypoints/start-{{ daemon.configName }}.sh
        target: /opt/blockchain/start-{{ daemon.configName }}.sh
    networks:
      backend:
        ipv4_address: {{ daemon.ip }}
{% endfor %}

  {{ blocknet_node }}:
    image: {{ blocknet_image }}
    entrypoint: /opt/blockchain/start-{{ blocknet_node }}.sh
    restart: unless-stopped
    environment:
      PUBLIC_IP: "${PUBLIC_IP}"
      RPC_USER: "${RPC_USER}"
      RPC_PASSWORD: "${RPC_PASSWORD}"
{% if blocknet_node == 'snode' or blocknet_node == 'testsnode' %}
      SN_NAME: "${SN_NAME}"
      SN_ADDRESS: "${SN_ADDRESS}"
      SN_KEY: "${SN_KEY}"
{% endif %}
    volumes:
{% if blocknet_node == 'snode' %}
      - {{ snode_config_mount_dir }}/snode/config:/opt/blockchain/config
      - {{ snode_data_mount_dir }}/snode/data:/opt/blockchain/data
{% elif blocknet_node == 'tnode' %}
      - {{ tnode_config_mount_dir }}/tnode/config:/opt/blockchain/config
      - {{ tnode_data_mount_dir }}/tnode/data:/opt/blockchain/data
{% elif blocknet_node == 'testsnode' %}
      - {{ testsnode_config_mount_dir }}/testsnode/config:/opt/blockchain/config
      - {{ testsnode_data_mount_dir }}/testsnode/data:/opt/blockchain/data
{% elif blocknet_node == 'testtnode' %}
      - {{ testtnode_config_mount_dir }}/testtnode/config:/opt/blockchain/config
      - {{ testtnode_data_mount_dir }}/testtnode/data:/opt/blockchain/data
{% endif %}
      - type: bind
        source: ./scripts
        target: /opt/blockchain
      - type: bind
        source: ./plugins
        target: /opt/blockchain/data/plugins
      - type: bind
        source: ./scripts/config/xbridge.conf
        target: /opt/blockchain/data/xbridge.conf
    ports:
      - "41412:41412"
    networks:
      backend:
{% if blocknet_node == 'snode' %}
        ipv4_address: {{ snode_ip }}
{% elif blocknet_node == 'tnode' %}
        ipv4_address: {{ tnode_ip }}
{% elif blocknet_node == 'testsnode' %}
        ipv4_address: {{ testsnode_ip }}
{% elif blocknet_node == 'testtnode' %}
        ipv4_address: {{ testtnode_ip }}
{% endif %}

{% if deploy_avax %}
  avax:
    image: {{ avax_image }}
    restart: unless-stopped
    expose:
      - 9650
      - 9651
    entrypoint: /avalanchego/build/avalanchego
    command:
      - --http-host=0.0.0.0
      - --index-enabled
      - --db-dir=/data
    volumes:
      - {{ avax_data_mount_dir }}/AVAX:/data
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ avax_ip }}
{% endif %}

{% if deploy_eth %}
{% if gethexternal is sameas false %}
  geth:
    image: {{ eth_image }}
    restart: unless-stopped
    volumes:
      - {{ eth_geth_data_mount_dir }}/ETH:/chaindata
    stop_signal: SIGINT
    stop_grace_period: 2m
    command:
{% if eth_testnet %}
      - --{{ eth_testnet }}
      - --syncmode={{ syncmode }}
{% else %}
      - --gcmode=archive
      - --syncmode=full
{% endif %}
      - --nousb
      - --http
      - --http.api
      - "personal,eth,net,web3"
      - --http.addr=0.0.0.0
      - --http.vhosts=*
      - --http.corsdomain=*
      - --ws
      - --ws.origins=*
      - --ws.addr=0.0.0.0
      - --ws.api
      - "personal,eth,net,web3"
      - --graphql
      - --graphql.corsdomain=*
      - --graphql.vhosts=*
      - --datadir
      - "/chaindata"
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ geth_ip }}
{% endif %}
{% endif %}

{% if deploy_eth or deploy_avax %}
{% if deploy_payment %}
  eth_payment_api:
    image: {{ payment_image }}
    restart: unless-stopped
    environment:
{% if deploy_eth %}
      ETH_HOST: {{ geth_ip }}
      ETH_PORT: 8546
      ETH_HOST_TYPE: ws
{% endif %}
{% if deploy_avax %}
      AVAX_HOST: {{ avax_ip }}
      AVAX_PORT: 9650
      AVAX_HOST_TYPE: http
{% endif %}
{% if avaxexternal %}
      AVAX_HOST: {{ avax_ip }}
      AVAX_PORT: 9650
      AVAX_HOST_TYPE: http
{% endif %}
      PAYMENT_AMOUNT_TIER1: {{ payment_tier1 }}
      PAYMENT_AMOUNT_TIER2: {{ payment_tier2 }}
      DB_HOST: {{ pg_ip }}
      DB_USERNAME: ethproxy
      DB_PASSWORD: password
      DB_DATABASE: eth
    expose:
      - 8080
    depends_on:
{% if gethexternal is sameas false %}
      - geth
{% endif %}
      - postgresql
    networks:
      backend:
        ipv4_address: {{ payment_ip }}

  postgresql:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: eth
      POSTGRES_USER: ethproxy
      POSTGRES_PASSWORD: password
    volumes:
      - {{ eth_postgresql_data_mount_dir }}:/var/lib/postgresql/data
    networks:
      backend:
        ipv4_address: {{ pg_ip }}
{% endif %}
{% endif %}

  xr_proxy:
    image: {{ xr_proxy_image }}
    entrypoint: /opt/scripts/start-xrproxy.sh
    restart: unless-stopped
    ports: 
      - "80:80"
    environment:
      RPC_USER: "${RPC_USER}"
      RPC_PASSWORD: "${RPC_PASSWORD}"
      SN_KEY: "${SN_KEY}"
{% if deploy_eth %}
      GETH_HOST: {{ geth_ip }}
      ETH_HOST: http://{{ geth_ip }}:8545
      ETH_HOST_USER:
      ETH_HOST_PASS:
      ETH_HOST_DISALLOWED_METHODS: eth_accounts,db_putString,db_getString,db_putHex,db_getHex
{% endif %}
{% if deploy_eth or deploy_avax %}
{% if deploy_payment %}
      PAYMENT_PROCESSOR_HOST: {{ payment_ip }}:8080
      DB_HOST: {{ pg_ip }}
      DB_USERNAME: ethproxy
      DB_PASSWORD: password
      DB_DATABASE: eth
{% endif %}
{% endif %}
{% if deploy_xquery %}
      XQUERY_HOST: http://{{ reverse_proxy_ip }}:{{ reverse_proxy_port}}
{% endif %}
    volumes:
      - {{ xr_proxy_config_mount_dir }}:/opt/uwsgi/conf
      - {{ xr_proxy_nginx_mount_dir }}:/etc/nginx/conf.d
      - type: bind
        source: ./scripts
        target: /opt/scripts
    networks:
      frontend:
      backend:
        ipv4_address: {{ xr_proxy_ip }}

#### XQUERY ####
{% if deploy_xquery %}

{% include 'templates/xquery.j2' %}

{% endif %}
#### XQUERY ####

networks:
  frontend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.41.0.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/20
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
